# Основные методы для работы

"""
Метод get позволяет безопасно обратиться к значению по ключу.
Возвращает значение, если ключ существует, или значение по умолчанию (None).
Пример:
"""
my_dict = {"a": 1, "b": 2}
value = my_dict.get("a", 0)  # Вернёт 1
missing_value = my_dict.get("c", 0)  # Вернёт 0

# Метод copy создаёт поверхностную копию словаря.
# Пример:
new_dict = my_dict.copy()
new_dict["c"] = 3
# my_dict остаётся без изменений: {"a": 1, "b": 2}

"""
Метод clear очищает словарь, удаляя все пары ключ-значение.
Пример:
"""
my_dict.clear()
# После выполнения my_dict становится пустым: {}

"""
Метод pop удаляет элемент по ключу и возвращает его значение.
Если ключ не найден, можно указать значение по умолчанию.
Пример:
"""
my_dict = {"x": 10, "y": 20}
removed_value = my_dict.pop("x", 0)  # Вернёт 10
missing_key_value = my_dict.pop("z", 0)  # Вернёт 0
# my_dict после выполнения: {"y": 20}

# Словарь является ссылочным типом данных.
# Это означает, что при присваивании или передаче в функцию
# создаётся не копия, а ссылка на исходный объект.

# Пример:
original_dict = {"a": 1, "b": 2}
reference_dict = original_dict  # reference_dict ссылается на original_dict

reference_dict["c"] = 3  # Изменяем reference_dict
print(original_dict)  # {"a": 1, "b": 2, "c": 3} — original_dict тоже изменился

# Чтобы избежать такого поведения, используйте метод copy:
safe_copy = original_dict.copy()
safe_copy["d"] = 4  # Изменяем копию
print(original_dict)  # {"a": 1, "b": 2, "c": 3} — original_dict не изменился
print(safe_copy)  # {"a": 1, "b": 2, "c": 3, "d": 4}
